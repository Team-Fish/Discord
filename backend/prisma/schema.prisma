generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())

    email         String    @unique
    password      String
    username      String
    image         String?
    emailVerified DateTime?
    u_name        String    @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sendFriendRequests     FriendRequest[] @relation("sender")
    receivedFriendRequests FriendRequest[] @relation("receiver")
    sendFriends            Friend[]        @relation("sender")
    receivedFriends        Friend[]        @relation("receiver")
    messages               Message[]

    createdConversations  Conversation[] @relation("creator")
    acceptedConversations Conversation[] @relation("recipient")

    @@map("users")
}

model FriendRequest {
    id String @id @default(uuid())

    senderId String
    sender   User?  @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)

    receiverId String
    receiver   User?  @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    status String

    @@map("friend_requsts")
}

model Friend {
    id String @id @default(uuid())

    senderId String
    sender   User?  @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)

    receiverId String
    receiver   User?  @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("friends")
}

model Message {
    id String @id @default(uuid())

    content String

    authorId String
    author   User?  @relation(fields: [authorId], references: [id], onDelete: Cascade)

    conversationId String
    conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    lastInConversation Conversation? @relation("last_message_sent")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Conversation {
    id String @id @default(uuid())

    creatorId String
    creator   User?  @relation(name: "creator", fields: [creatorId], references: [id], onDelete: Cascade)

    recipientId String
    recipient   User?  @relation(name: "recipient", fields: [recipientId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    messages Message[]

    messageId       String?  @unique
    lastMessageSent Message? @relation(name: "last_message_sent", fields: [messageId], references: [id])

    lastMessageSentAt DateTime @updatedAt
}
